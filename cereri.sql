--========================================================
--    5 CERERI COMPLEXE
--========================================================

WITH JUST_ZOO AS (SELECT COD_ZOO
    			   FROM GRADINI_ZOOLOGICE_AU_JOBURI)
SELECT DISTINCT V.*
FROM VIZITATORI V 
    JOIN CUMPARA_ACCES_LA C ON V.COD_VIZITATOR = C.COD_VIZITATOR
    JOIN HABITATE H ON C.COD_HABITAT = H.COD_HABITAT, JUST_ZOO
WHERE H.COD_ZOO IN
    (SELECT GZL.COD_ZOO
     FROM GRADINI_ZOOLOGICE_AU_JOBURI GZL
    	JOIN GRADINI_ZOOLOGICE G ON GZL.COD_ZOO = G.COD_ZOO
     WHERE LOWER(G.EMAIL) LIKE '%gmail%'
     GROUP BY GZL.COD_ZOO
     HAVING COUNT(*) != (SELECT MAX(COUNT(*))
                            FROM JUST_ZOO
                            GROUP BY COD_ZOO));

--======================= FIXED ==========================

--WITH JUST_ZOO AS (SELECT COD_ZOO
--    			   FROM GRADINI_ZOOLOGICE_AU_JOBURI)
--SELECT DISTINCT V.*
--FROM VIZITATORI V 
--    JOIN CUMPARA_ACCES_LA C ON V.COD_VIZITATOR = C.COD_VIZITATOR
--    JOIN HABITATE H ON C.COD_HABITAT = H.COD_HABITAT, JUST_ZOO
--WHERE EXISTS
--    (SELECT GZL.COD_ZOO
--     FROM GRADINI_ZOOLOGICE_AU_JOBURI GZL
--    	JOIN GRADINI_ZOOLOGICE G ON GZL.COD_ZOO = G.COD_ZOO
--     WHERE H.COD_ZOO = GZL.COD_ZOO 
--     AND lower(G.EMAIL) LIKE '%gmail%'
--     GROUP BY GZL.COD_ZOO
--     HAVING COUNT(*) != (SELECT MAX(COUNT(*))
--                            FROM JUST_ZOO
--                            GROUP BY COD_ZOO));

--========================================================

SELECT NVL(G.NUME_ZOO, 'Necunoscut') AS NUME_GRADINA_ZOOLOGICA,
       COUNT(DISTINCT V.COD_VIZITATOR) AS NUMAR_VIZITATORI,
       DECODE(SUM(CASE WHEN C.DATA > SYSDATE - 365 THEN 1 ELSE 0 END), 1, 'DA', 'NU') AS VIZITATORI_RECENTI
FROM GRADINI_ZOOLOGICE G
JOIN HABITATE H ON G.COD_ZOO = H.COD_ZOO
JOIN ANIMALE_SUPRATERANE A ON H.COD_HABITAT = A.COD_HABITAT
JOIN CUMPARA_ACCES_LA C ON H.COD_HABITAT = C.COD_HABITAT
JOIN VIZITATORI V ON C.COD_VIZITATOR = V.COD_VIZITATOR
GROUP BY G.NUME_ZOO
HAVING COUNT(A.COD_ANIMAL_ST) >= 3
ORDER BY NUMAR_VIZITATORI DESC;

--========================================================

SELECT G.NUME_ZOO, L.ORAS, COUNT(DISTINCT A.COD_ANIMAL_ST) AS NUMAR_ANIMALE
FROM (SELECT COD_ZOO, COD_LOCATIE, NUME_ZOO 
     FROM GRADINI_ZOOLOGICE
     WHERE COD_ZOO IN 
(SELECT DISTINCT COD_ZOO FROM GRADINI_ZOOLOGICE_SUNT_SPONSORIZATE_DE_SPONSORI)) G
JOIN LOCATII L ON G.COD_LOCATIE = L.COD_LOCATIE
JOIN HABITATE H ON G.COD_ZOO = H.COD_ZOO
JOIN ANIMALE_SUPRATERANE A ON H.COD_HABITAT = A.COD_HABITAT
GROUP BY G.NUME_ZOO, L.ORAS
ORDER BY NUMAR_ANIMALE DESC;

--========================================================

SELECT G.NUME_ZOO, COUNT(DISTINCT A.COD_ANIMAL_ST) AS NUMAR_ANIMALE,
    ROUND(AVG(LENGTH(A.NUME_ANIMAL))) AS MEDIA_LUNGIME_NUME
FROM GRADINI_ZOOLOGICE G
JOIN HABITATE H ON G.COD_ZOO = H.COD_ZOO
JOIN ANIMALE_SUPRATERANE A ON H.COD_HABITAT = A.COD_HABITAT
GROUP BY G.NUME_ZOO
HAVING  (SELECT COUNT(*)
         FROM ANGAJATI AG, JOBURI J, GRADINI_ZOOLOGICE GG
    	 WHERE AG.COD_JOB = J.COD_JOB 
    	 AND J.EXPERIENTA_MINIMA > 1
    	 AND (J.COD_JOB, GG.COD_ZOO) IN
    		(SELECT COD_JOB, COD_ZOO
    		FROM GRADINI_ZOOLOGICE_AU_JOBURI
    		WHERE COD_ZOO > 4)) >= 3
ORDER BY NUMAR_ANIMALE DESC;

--======================= FIXED ==========================
-- Selectati codul si numele gradiniilor zoologice care au mai multe joburi decat media joburilor cu mai mult de un an experienta si care are minim un angajat cu litera "a" in nume (gradiniile zoologice cu 0 astfel de joburi sunt ignorate in calcularea mediei)

--SELECT G.COD_ZOO, G.NUME_ZOO
--FROM GRADINI_ZOOLOGICE G JOIN GRADINI_ZOOLOGICE_AU_JOBURI GJ ON G.COD_ZOO=GJ.COD_ZOO
--GROUP BY GJ.COD_ZOO, G.COD_ZOO, G.NUME_ZOO
--HAVING COUNT(COD_JOB) > 
--    (SELECT AVG(NRJOBS)
--     FROM (SELECT COUNT(GJ.COD_JOB) NRJOBS
--           FROM GRADINI_ZOOLOGICE_AU_JOBURI GJ
--           JOIN JOBURI J ON GJ.COD_JOB = J.COD_JOB
--           JOIN ANGAJATI A ON J.COD_JOB = A.COD_JOB
--    	   WHERE J.EXPERIENTA_MINIMA > 1
--    	   AND A.NUME LIKE '%a%'
--           GROUP BY COD_ZOO)
--    );

--========================================================

SELECT V.NUME || ' ' || V.PRENUME AS NUME_VIZITATOR,
       LENGTH(V.NUME)+LENGTH(V.PRENUME) AS LUNGIME_NUME,
       ROUND(MONTHS_BETWEEN(SYSDATE, C.DATA) / 12, 2) AS ANI_VECHIME,
       TO_CHAR(C.DATA, 'DD MONTH YYYY') AS DATA_FORMATATA,
       CASE WHEN C.PRET > 100 THEN 'SCUMP'
    	 	WHEN C.PRET BETWEEN 50 AND 100 THEN 'MEDIU' 
    		ELSE 'IEFTIN'
       END AS CATEGORIE_PRET
FROM VIZITATORI V
JOIN CUMPARA_ACCES_LA C ON V.COD_VIZITATOR = C.COD_VIZITATOR
WHERE C.DATA BETWEEN ADD_MONTHS(SYSDATE, -24) AND SYSDATE
ORDER BY CATEGORIE_PRET DESC;

--========================================================
--    OPERATII DE ACTUALIZARE SI DE SUPRIMARE
--========================================================

DELETE FROM ANIMALE_ACVATICE
WHERE COD_ACVARIU IN 
    (SELECT COD_ACVARIU
     FROM ACVARII
     WHERE COD_ZOO NOT IN 
        (SELECT COD_ZOO
         FROM GRADINI_ZOOLOGICE_SUNT_SPONSORIZATE_DE_SPONSORI));


--========================================================

UPDATE GRADINI_ZOOLOGICE_SUNT_SPONSORIZATE_DE_SPONSORI
SET SUMA = SUMA + 2500
WHERE COD_ZOO IN
    (SELECT COD_ZOO
    FROM GRADINI_ZOOLOGICE_AU_JOBURI
    GROUP BY COD_ZOO
    HAVING COUNT(*) >= 2);
    
--========================================================

UPDATE ANGAJATI
SET SALARIU = SALARIU * 1.1
WHERE COD_JOB IN 
    (SELECT COD_JOB
     FROM JOBURI
     WHERE EXPERIENTA_MINIMA >= 3);
                  
--========================================================
--  VIZUALIZARE COMPLEXA
--========================================================

CREATE OR REPLACE VIEW ACVARII_BUGET
AS SELECT A.COD_ACVARIU, A.NUME_ACVARIU, B.COD_ZOO, B.SPONSORIZARI_ZOO
    FROM ACVARII A, 
    	(SELECT COD_ZOO, SUM(SUMA) SPONSORIZARI_ZOO
         FROM GRADINI_ZOOLOGICE_SUNT_SPONSORIZATE_DE_SPONSORI
         GROUP BY COD_ZOO) B
    WHERE A.COD_ZOO = B.COD_ZOO
    ORDER BY 4 DESC;

SELECT * FROM ACVARII_BUGET
ORDER BY SPONSORIZARI_ZOO;

UPDATE ACVARII_BUGET
SET SPONSORIZARI_ZOO = 20000
WHERE COD_ACVARIU = 1;

--========================================================
--  OUTER-JOIN, DIVISION, TOP-N
--========================================================

SELECT ORAS, NUME_ANIMAL_ACV
FROM ANIMALE_ACVATICE AA
	LEFT OUTER JOIN ACVARII A ON AA.COD_ACVARIU = A.COD_ACVARIU
	LEFT OUTER JOIN GRADINI_ZOOLOGICE G ON A.COD_ZOO = G.COD_ZOO
	LEFT OUTER JOIN LOCATII L ON G.COD_LOCATIE = L.COD_LOCATIE
WHERE LOWER(ORAS) LIKE 'c%';

--========================================================
-- Selecteaza codul si numele complet al vizitatorilor care au fost la toate habitatele

--SELECT COD_VIZITATOR, NUME, PRENUME
--FROM VIZITATORI V
--WHERE NOT EXISTS(
--    SELECT COD_HABITAT
--    FROM HABITATE H
--    WHERE NOT EXISTS(
--    	SELECT COD_TRANZACTIE
--		FROM CUMPARA_ACCES_LA C
--    	WHERE V.COD_VIZITATOR = C.COD_VIZITATOR
--    	AND H.COD_HABITAT = C.COD_HABITAT
--    )
--);

--========================================================
-- Selecteaza top 3 gradini zoologice dupa numarul de bilete vandute la habitatele sale. In caz de egalitate la numarul de bilete, sorteaza dupa cod.

--SELECT COD_ZOO, NVL(NUME_ZOO,'Fara nume') NUME_ZOO, BILETE
--FROM (SELECT G.COD_ZOO, G.NUME_ZOO, COUNT(COD_TRANZACTIE) BILETE
--      FROM CUMPARA_ACCES_LA C 
--      JOIN HABITATE H ON C.COD_HABITAT=H.COD_HABITAT
--      JOIN GRADINI_ZOOLOGICE G ON H.COD_ZOO=G.COD_ZOO
--      GROUP BY G.COD_ZOO, G.NUME_ZOO
--      ORDER BY COUNT(C.COD_HABITAT) desc, G.COD_ZOO)
--WHERE ROWNUM <= 3;

--========================================================
-- OPTIMIZARE ALGEBRICA
--========================================================

SELECT DISTINCT NUME_JOB
FROM JOBURI J, ANGAJATI A
WHERE J.COD_JOB IN
	(SELECT COD_JOB
     FROM ANGAJATI
	 WHERE SALARIU > 3000);

--========================================================

WITH ANG_SAL AS (
	SELECT COD_JOB
    FROM ANGAJATI
    WHERE SALARIU > 3000
)
SELECT DISTINCT NUME_JOB
FROM JOBURI J JOIN ANG_SAL A 
    ON J.COD_JOB = A.COD_JOB;
    
--========================================================